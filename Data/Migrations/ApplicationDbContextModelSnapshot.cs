// <auto-generated />
using System;
using E_PRESCRIBING_SYSTEM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_PRESCRIBING_SYSTEM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", b =>
                {
                    b.Property<int>("ActiveIngredientsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveIngredientsID"), 1L, 1);

                    b.Property<string>("ActiveIngredientsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.HasKey("ActiveIngredientsID");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("ActiveIngredients");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ActiveMedicationIngredient", b =>
                {
                    b.Property<int>("ActiveMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveMedicationId"), 1L, 1);

                    b.Property<int>("ActiveIngredientsID")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveMedicationId");

                    b.HasIndex("ActiveIngredientsID");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("ActiveMedicationIngredients");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.Property<double>("height")
                        .HasColumnType("float");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("weight")
                        .HasColumnType("float");

                    b.HasKey("AdmissionId");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("WardID");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Condition", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionID"), 1L, 1);

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionID");

                    b.ToTable("conditions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ContraIndication", b =>
                {
                    b.Property<int>("ContraIndicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContraIndicationId"), 1L, 1);

                    b.Property<int>("ActiveIngredientsID")
                        .HasColumnType("int");

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.HasKey("ContraIndicationId");

                    b.HasIndex("ActiveIngredientsID");

                    b.HasIndex("ConditionID");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("ContraIndications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.DosageForm", b =>
                {
                    b.Property<int>("DosageFormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageFormID"), 1L, 1);

                    b.Property<string>("DosageFormName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageFormID");

                    b.ToTable("Dosages");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.GeneralMedication", b =>
                {
                    b.Property<int>("GeneralMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralMedicationID"), 1L, 1);

                    b.Property<int>("DosageFormID")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevels")
                        .HasColumnType("int");

                    b.Property<string>("Schedules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockOnHand")
                        .HasColumnType("int");

                    b.Property<int>("strengths")
                        .HasColumnType("int");

                    b.HasKey("GeneralMedicationID");

                    b.HasIndex("DosageFormID");

                    b.ToTable("GeneralMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Medication", b =>
                {
                    b.Property<int>("MedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationID"), 1L, 1);

                    b.Property<int>("ActiveIngredientsID")
                        .HasColumnType("int");

                    b.Property<int>("DosageFormID")
                        .HasColumnType("int");

                    b.Property<string>("IngredientStrength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("StockOnHand")
                        .HasColumnType("int");

                    b.HasKey("MedicationID");

                    b.HasIndex("ActiveIngredientsID");

                    b.HasIndex("DosageFormID");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.NewPrescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<string>("RejectionNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("PatientProfileId");

                    b.ToTable("NewPrescriptions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.OrderStock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockID");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("OrderStock");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientAllergy", b =>
                {
                    b.Property<int>("PatientAllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAllergyId"), 1L, 1);

                    b.Property<int>("ActiveIngredientsID")
                        .HasColumnType("int");

                    b.Property<string>("AllergyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.HasKey("PatientAllergyId");

                    b.HasIndex("ActiveIngredientsID");

                    b.HasIndex("PatientProfileId");

                    b.ToTable("patientAllergies");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientCondition", b =>
                {
                    b.Property<int>("PatientConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientConditionId"), 1L, 1);

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.HasKey("PatientConditionId");

                    b.HasIndex("ConditionID");

                    b.HasIndex("PatientProfileId");

                    b.ToTable("PatientConditions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientMedication", b =>
                {
                    b.Property<int>("PatientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMedicationId"), 1L, 1);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PatientMedicationId");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientProfile", b =>
                {
                    b.Property<int>("PatientProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientProfileId"), 1L, 1);

                    b.Property<int?>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientIDno")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientProfileId");

                    b.HasIndex("AdmissionId");

                    b.ToTable("PatientProfiles");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", b =>
                {
                    b.Property<int>("PharmacyMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PharmacyMedicationId"), 1L, 1);

                    b.Property<int>("DosageFormID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.Property<int>("StockOnHand")
                        .HasColumnType("int");

                    b.HasKey("PharmacyMedicationId");

                    b.HasIndex("DosageFormID");

                    b.ToTable("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PrescriptionMedication", b =>
                {
                    b.Property<int>("PrescriptionMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionMedicationId"), 1L, 1);

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionMedicationId");

                    b.HasIndex("PharmacyMedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Province", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceID"), 1L, 1);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.StockOrder", b =>
                {
                    b.Property<int>("StockOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockOrderID"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockOrderID");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("StockOrders");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.StockReceived", b =>
                {
                    b.Property<int>("StockReceivedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockReceivedID"), 1L, 1);

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceivedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockOrderID")
                        .HasColumnType("int");

                    b.HasKey("StockReceivedID");

                    b.HasIndex("PharmacyMedicationId");

                    b.HasIndex("StockOrderID");

                    b.ToTable("StockReceived");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbID"), 1L, 1);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbID");

                    b.HasIndex("CityID");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryID"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TheatreID")
                        .HasColumnType("int");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurgeryID");

                    b.HasIndex("PatientProfileId");

                    b.HasIndex("TheatreID");

                    b.ToTable("Surgery");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.SurgeryTreatment", b =>
                {
                    b.Property<int>("SurgeryTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryTreatmentId"), 1L, 1);

                    b.Property<int>("SurgeryID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.HasKey("SurgeryTreatmentId");

                    b.HasIndex("SurgeryID");

                    b.HasIndex("TreatmentID");

                    b.ToTable("SurgeryTreatments");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Threatre", b =>
                {
                    b.Property<int>("TheatreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreID"), 1L, 1);

                    b.Property<string>("TheatreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TheatreID");

                    b.ToTable("threatres");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.TreatmentCode", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentID"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentID");

                    b.ToTable("TreatmentCodes");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.VitalSign", b =>
                {
                    b.Property<int>("VitalSignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalSignId"), 1L, 1);

                    b.Property<decimal>("BloodOxygenSaturation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BodyTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HeartRate")
                        .HasColumnType("int");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VitalSignId");

                    b.HasIndex("PatientProfileId");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"), 1L, 1);

                    b.Property<int?>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<string>("Bed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.HasIndex("AdmissionId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NewPrescriptionPharmacyMedication", b =>
                {
                    b.Property<int>("NewPrescriptionsPrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyMedicationId")
                        .HasColumnType("int");

                    b.HasKey("NewPrescriptionsPrescriptionId", "PharmacyMedicationId");

                    b.HasIndex("PharmacyMedicationId");

                    b.ToTable("NewPrescriptionPharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", null)
                        .WithMany("ActiveIngredients")
                        .HasForeignKey("PharmacyMedicationId");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ActiveMedicationIngredient", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany("MedicationActiveIngredients")
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Admission", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.City", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Province", "Province")
                        .WithMany("Citys")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.ContraIndication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Condition", "Condition")
                        .WithMany("ContraIndications")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", null)
                        .WithMany("ContraIndications")
                        .HasForeignKey("PharmacyMedicationId");

                    b.Navigation("ActiveIngredients");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.GeneralMedication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Medication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("DosageForm");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.NewPrescription", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.OrderStock", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientAllergy", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.ActiveIngredients", "ActiveIngredients")
                        .WithMany()
                        .HasForeignKey("ActiveIngredientsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredients");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientCondition", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientMedication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany("PatientMedications")
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany("PatientMedications")
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientProfile", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Admission", null)
                        .WithMany("PatientProfiles")
                        .HasForeignKey("AdmissionId");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("DosageFormID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Prescription", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PrescriptionMedication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.NewPrescription", "NewPrescription")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewPrescription");

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.StockOrder", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.StockReceived", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", "PharmacyMedication")
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.StockOrder", "StockOrder")
                        .WithMany("StockReceiveds")
                        .HasForeignKey("StockOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PharmacyMedication");

                    b.Navigation("StockOrder");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Suburb", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Surgery", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Threatre", "Theatre")
                        .WithMany()
                        .HasForeignKey("TheatreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.SurgeryTreatment", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Surgery", "Surgery")
                        .WithMany("SurgeryTreatments")
                        .HasForeignKey("SurgeryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.TreatmentCode", "TreatmentCode")
                        .WithMany()
                        .HasForeignKey("TreatmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surgery");

                    b.Navigation("TreatmentCode");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.VitalSign", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PatientProfile", "PatientProfile")
                        .WithMany()
                        .HasForeignKey("PatientProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientProfile");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Ward", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.Admission", null)
                        .WithMany("Wards")
                        .HasForeignKey("AdmissionId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewPrescriptionPharmacyMedication", b =>
                {
                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.NewPrescription", null)
                        .WithMany()
                        .HasForeignKey("NewPrescriptionsPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", null)
                        .WithMany()
                        .HasForeignKey("PharmacyMedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Admission", b =>
                {
                    b.Navigation("PatientProfiles");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Condition", b =>
                {
                    b.Navigation("ContraIndications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.NewPrescription", b =>
                {
                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PatientProfile", b =>
                {
                    b.Navigation("PatientAllergies");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientMedications");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.PharmacyMedication", b =>
                {
                    b.Navigation("ActiveIngredients");

                    b.Navigation("ContraIndications");

                    b.Navigation("MedicationActiveIngredients");

                    b.Navigation("PatientMedications");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Province", b =>
                {
                    b.Navigation("Citys");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.StockOrder", b =>
                {
                    b.Navigation("StockReceiveds");
                });

            modelBuilder.Entity("E_PRESCRIBING_SYSTEM.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryTreatments");
                });
#pragma warning restore 612, 618
        }
    }
}
